{"/home/travis/build/npmtest/node-npmtest-spindrift/test.js":"/* istanbul instrument in package npmtest_spindrift */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-spindrift/lib.npmtest_spindrift.js":"/* istanbul instrument in package npmtest_spindrift */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_spindrift = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_spindrift = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-spindrift/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-spindrift && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_spindrift */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_spindrift\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_spindrift.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_spindrift.rollup.js'] =\n            local.assetsDict['/assets.npmtest_spindrift.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_spindrift.__dirname + '/lib.npmtest_spindrift.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-spindrift/node_modules/spindrift/spindrift.js":"var fs = require('fs');\nvar spawn = require('child_process').spawn;\nvar path = require('path');\nvar Stream = require('stream').Stream;\n\nvar BufferStream = require('bufferstream');\nvar temp = require('temp');\nvar async = require('async');\n\n// Calls functions once a promise has been delivered.\n// Queue functions by using promise(yourCallback); Deliver the promise using promise.deliver().\n// Once the promise has been delivered, promise(yourCallback) immediately calls.\n\nfunction promise () {\n  var queue = [], args = null;\n  var promise = function (fn) {\n    if (promise.delivered) {\n      process.nextTick(function () {\n        fn.apply(null, args);\n      });\n    } else {\n      queue.push(fn);\n    }\n  }\n  promise.deliver = function () {\n    args = arguments, promise.delivered = true;\n    queue.splice(0, queue.length).forEach(function (fn) {\n      process.nextTick(function () {\n        fn.apply(null, args);\n      });\n    });\n  }\n  return promise;\n}\n\nfunction proxyStream (a, b) {\n  if (a && b) {\n    a\n      .on('data', b.emit.bind(b, 'data'))\n      .on('end', b.emit.bind(b, 'end'))\n      .on('error', b.emit.bind(b, 'error'));\n  }\n}\n\n// spindrift\n\nfunction Command (input, ready) {\n  this.input = input;\n  this.commands = [];\n  this.onready = promise();\n  if (ready !== false) {\n    this.onready.deliver();\n  }\n}\n\nCommand.prototype._copy = function () {\n  var cmd = new Command();\n  cmd.input = this.input;\n  cmd.commands = this.commands.slice();\n  cmd.onready = this.onready;\n  return cmd;\n}\n\nCommand.prototype._push = function (command) {\n  this.commands.push(command);\n  this.input = command;\n  return this;\n}\n\nCommand.prototype._input = function () {\n  // Non-existant files will throw an error, assume full paths.\n  try {\n    return typeof this.input == 'string' ? fs.realpathSync(this.input) : '-';\n  } catch (e) {\n    return this.input;\n  }\n};\n\n// Cloning commands.\n\nCommand.prototype.pages = function (min, max) {\n  var cmd = this._copy();\n  return cmd._push([\n    'pdftk', cmd._input(),\n    'cat', min + (max === null ? '' : '-' + max),\n    'output', '-'\n    ]);\n};\n\nCommand.prototype.page = function (page) {\n  return this.pages(page, page);\n};\n\nCommand.prototype.odd = function (min, max) {\n  var cmd = this._copy();\n  return cmd._push([\n    'pdftk', cmd._input(),\n    'cat', 'odd',\n    'output', '-'\n    ]);\n};\n\nCommand.prototype.even = function (min, max) {\n  var cmd = this._copy();\n  return cmd._push([\n    'pdftk', cmd._input(),\n    'cat', 'even',\n    'output', '-'\n    ]);\n};\n\nCommand.prototype.reverse = function (min, max) {\n  var cmd = this._copy();\n  return cmd._push([\n    'pdftk', cmd._input(),\n    'cat', 'end-1',\n    'output', '-'\n    ]);\n};\n\nCommand.prototype.rotate = function (amount) {\n  var cmd = this._copy();\n  this.buffer();\n  var amount = Number(amount) % 360, dir = null;\n  switch (amount) {\n    case 90: case -270: dir = 'R'; break;\n    case 180: case -180: dir = 'D'; break;\n    case -90: case 270: dir = 'L'; break;\n    default: return this;\n  }\n  return cmd._push([\n    'pdftk', cmd._input(),\n    'cat', '1-end' + dir,\n    'output', '-'\n    ]);\n};\n\nCommand.prototype.compress = function () {\n  var cmd = this._copy();\n  return cmd._push([\n    'pdftk', cmd._input(), 'output', '-',\n    'compress'\n    ]);\n};\n\nCommand.prototype.uncompress = function () {\n  var cmd = this._copy();\n  return cmd._push([\n    'pdftk', cmd._input(), 'output', '-',\n    'uncompress'\n    ]);\n};\n\nCommand.prototype.repair = function () {\n  // pdftk extraction of a single page causes issues for some reason.\n  // \"repairing\" using pdftk fixes this.\n  var cmd = this._copy();\n  var args = [\n    'pdftk', this._input(), 'output', '-',\n    ];\n  // Don't double-repair.\n  if (JSON.stringify(this.commands[this.commands.length - 1]) != JSON.stringify(args)) {\n    cmd._push(args);\n  }\n  return cmd;\n};\n\nCommand.prototype.crop = function (l, b, r, t) {\n  var cmd = this.uncompress();\n  return cmd._push([path.join(__dirname, 'bin/crop.js'), l, b, r, t]);\n};\n\nCommand.prototype.pdfStream = function () {\n  var cmd = this.repair();\n  return cmd._exec();\n};\n\nCommand.prototype.pngStream = function (dpi) {\n  var cmd = this.repair();\n  cmd._push([path.join(__dirname, 'bin/rasterize.js'), this._input(), 'pdf', 1, dpi || 72]);\n  var stream = cmd._exec();\n  return stream;\n};\n\n// Consumes this.pdfStream()\nCommand.prototype._commandStream = function () {\n  var stream = new BufferStream({\n    size: 'flexible'\n  });\n  var buf = [];\n  stream.split('\\n', function (line) {\n    var tokens = String(line).split(/[ ](?=[^\\)]*?(?:\\(|$))/);\n    var data = (function () {\n      switch (tokens[0]) {\n        case 'S': return {type: 'string', x: +tokens[1], y: +tokens[2], string: tokens[3].replace(/^.|.$/g, '')};\n        case 'F': return {type: 'font', height: +tokens[1], width: +tokens[2], font: (tokens[3] || '').replace(/^.|.$/g, '')};\n        case 'P': return {type: 'endpage'};\n        case 'C': return {type: 'color', r: +tokens[1], g: +tokens[2], b: +tokens[3]};\n        case 'I': return {type: 'image', x: +tokens[1], y: +tokens[2], width: +tokens[3], height: +tokens[4]};\n        case 'R': return {type: 'rectangle', x: +tokens[1], y: +tokens[2], width: +tokens[3], height: +tokens[4]};\n      }\n    })();\n    if (data) {\n      stream.emit('data', data);\n    }\n  });\n\n  var gs = spawn('gs', [\n    '-q', '-dNODISPLAY',\n    '-P-',\n    '-dSAFER',\n    '-dDELAYBIND',\n    '-dWRITESYSTEMDICT',\n    '-dCOMPLEX', path.join(__dirname, 'contrib/ps2ascii.ps'),\n    '-', '-c', 'quit']);\n  this.pdfStream().pipe(gs.stdin);\n  gs.stdout.pipe(stream);\n  gs.stderr.on('data', function (data) {\n    console.error('gs encountered an error:\\n', String(data));\n  });\n  gs.on('exit', function (code) {\n    stream.emit('end');\n  });\n  return stream;\n};\n\n// Consumes this.pdfStream()\nCommand.prototype.contentStream = function () {\n  function isNextStringPartOfLastString (b, a, font) {\n    // NOTE: This is a completely arbitrary hueristic.\n    // I wouldn't trust it to not break.\n    return Math.abs(a.y - b.y) < 50 && Math.abs((a.x + (a.string.length*(font.width / 3))) - b.x) < (font.width + 10);\n  }\n\n  function decode (str) {\n    return String(str).replace(/\\\\(\\d{3}|.)/g, function (str, esc) {\n      if (esc.length == 3) {\n        return String.fromCharCode(parseInt(esc, 8));\n      } else {\n        try {\n          return JSON.parse('\"' + str + '\"');\n        } catch (e) {\n          return esc;\n        }\n      }\n    });\n  }\n\n  var stream = new Stream(), str = '', first = null, last = null, font = null, color = null, imgindex = 0;\n  this._commandStream().on('data', function (cmd) {\n    if (cmd.type == 'string') {\n      if (!last || isNextStringPartOfLastString(cmd, last, font)) {\n        str += decode(cmd.string);\n      } else {\n        stream.emit('data', {\n          type: 'string', x: (first || cmd).x, y: (first || cmd).y, \n          string: str, font: font, color: color\n        });\n        str = decode(cmd.string);\n        first = cmd;\n      }\n      last = cmd;\n    } else if (cmd.type == 'image') {\n      cmd.index = imgindex++;\n      stream.emit('data', cmd);\n    } else if (cmd.type == 'font') {\n      delete cmd.type;\n      font = cmd;\n    } else if (cmd.type == 'color') {\n      delete cmd.type;\n      color = cmd;\n    }\n  }).on('end', function () {\n    if (str) {\n      stream.emit('data', {\n        type: 'string', x: (first || cmd).x, y: (first || cmd).y, \n        string: str, font: font, color: color\n      });\n      str = '';\n    }\n  });\n  return stream;\n};\n\n// Consumes this.pdfStream()\nCommand.prototype.textStream = function () {\n  var stream = new Stream();\n  this.contentStream().on('data', function (cmd) {\n    if (cmd.type == 'string') {\n      stream.emit('data', cmd.string);\n    }\n  })\n  return stream;\n};\n\n// Consumes this.pdfStream()\nCommand.prototype.extractImageStream = function (i) {\n  // NOTE: This is pretty costly and uses another dependency.\n  // Preferrably, this would be done in Ghostscript.\n  i = i || 0;\n  var stream = new Stream();\n  if (!this._pdfimages) {\n    var callback = this._pdfimages = promise();\n    temp.mkdir('pdfimages', function (err, dirPath) {\n      this.pdfStream()\n        .pipe(fs.createWriteStream(path.join(dirPath, 'file.pdf')))\n        .on('close', function () {\n          var prog = spawn('pdfimages', ['-j', dirPath + '/file.pdf', dirPath + '/A']);\n          prog.stderr.on('data', function (data) {\n            process.stderr.write('pdfimages: ' + String(data));\n          });\n          prog.on('exit', function (code) {\n            if (code) {\n              console.error('pdfimages exited with failure code:', code);\n              throw new Error('pdfimages failed.');\n            }\n            var files = fs.readdirSync(dirPath).slice(0, -1).map(function (file) {\n              return dirPath + '/' + file;\n            });\n            callback.deliver(files);\n          });\n        }.bind(this))\n    }.bind(this));\n  }\n\n  // Add callback to promise.\n  this._pdfimages(function (pdfimages) {\n    if (!pdfimages[i]) {\n      stream.emit('error', new Error('Image ' + i + ' out of bounds.'));\n      return;\n    }\n    proxyStream(fs.createReadStream(pdfimages[i]), stream);\n  });\n\n  return stream;\n};\n\nCommand.prototype._exec = function () {\n  var stream = new Stream(), commands = this.commands.slice();\n  this.onready(function () {\n    proxyStream(commands.reduce(function (input, command) {\n      var prog = spawn(command[0], command.slice(1));\n      console.error('spawn:', command.join(' '));\n      if (input) {\n        input.pipe(prog.stdin);\n      }\n      prog.stderr.on('data', function (data) {\n        process.stderr.write(command[0].match(/[^\\/]*$/)[0] + ': ' + String(data));\n      });\n      prog.on('exit', function (code) {\n        if (code) {\n          console.error(command[0], 'exited with failure code:', code);\n        }\n      });\n      return prog.stdout;\n    }, null), stream);\n  });\n  return stream;\n}\n\nvar spindrift = function (path) {\n  return new Command(path);\n}\n\nvar joinTemp = temp.mkdirSync('pdfimages'), joinindex = 0;\n\nspindrift.join = function () {\n  var args = Array.prototype.slice.call(arguments);\n\n  var outfile = joinTemp + '/' + (joinindex++) + '.pdf';\n  var pdf = new Command(outfile, false);\n\n  async.map(args, function (arg, next) {\n    var file = joinTemp + '/' + (joinindex++) + '.pdf';\n    arg.pdfStream()\n      .pipe(fs.createWriteStream(file))\n      .on('close', function () {\n        next(null, file);\n      });\n  }, function (err, files) {\n    command = ['pdftk'].concat(files, ['output', outfile]);\n    var prog = spawn(command[0], command.slice(1));\n    console.error('spawn:', command.join(' '));\n    prog.stderr.on('data', function (data) {\n      process.stderr.write(command[0].match(/[^\\/]*$/)[0] + ': ' + String(data));\n    });\n    prog.on('exit', function (code) {\n      if (code) {\n        console.error(command[0], 'exited with failure code:', code);\n      }\n      // PDF is now ready.\n      pdf.onready.deliver();\n    });\n  });\n\n  return pdf;\n}\n\nmodule.exports = spindrift;"}